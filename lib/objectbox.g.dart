// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again:
// With a Flutter package, run `flutter pub run build_runner build`.
// With a Dart package, run `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart';
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'model/video_file.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <ModelEntity>[
  ModelEntity(
      id: const IdUid(1, 7260572059221251547),
      name: 'VideoFile',
      lastPropertyId: const IdUid(12, 2326835429585472378),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 3363374863360473467),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(3, 8687047931407882459),
            name: 'videoLocation',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 8825579312505047835),
            name: 'thumbnailLocation',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 7718758373989713993),
            name: 'title',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 5580376473507223497),
            name: 'mimetype',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 2884583995314294399),
            name: 'date',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 6333004221918783348),
            name: 'width',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 3951826455599913070),
            name: 'height',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(10, 9219635122633973278),
            name: 'orientation',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(11, 7892747473789161624),
            name: 'filesize',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(12, 2326835429585472378),
            name: 'duration',
            type: 8,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[])
];

/// Open an ObjectBox store with the model declared in this file.
Future<Store> openStore(
        {String? directory,
        int? maxDBSizeInKB,
        int? fileMode,
        int? maxReaders,
        bool queriesCaseSensitiveDefault = true,
        String? macosApplicationGroup}) async =>
    Store(getObjectBoxModel(),
        directory: directory ?? (await defaultStoreDirectory()).path,
        maxDBSizeInKB: maxDBSizeInKB,
        fileMode: fileMode,
        maxReaders: maxReaders,
        queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
        macosApplicationGroup: macosApplicationGroup);

/// ObjectBox model definition, pass it to [Store] - Store(getObjectBoxModel())
ModelDefinition getObjectBoxModel() {
  final model = ModelInfo(
      entities: _entities,
      lastEntityId: const IdUid(1, 7260572059221251547),
      lastIndexId: const IdUid(0, 0),
      lastRelationId: const IdUid(0, 0),
      lastSequenceId: const IdUid(0, 0),
      retiredEntityUids: const [],
      retiredIndexUids: const [],
      retiredPropertyUids: const [1576484810646021191],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, EntityDefinition>{
    VideoFile: EntityDefinition<VideoFile>(
        model: _entities[0],
        toOneRelations: (VideoFile object) => [],
        toManyRelations: (VideoFile object) => {},
        getId: (VideoFile object) => object.id,
        setId: (VideoFile object, int id) {
          object.id = id;
        },
        objectToFB: (VideoFile object, fb.Builder fbb) {
          final videoLocationOffset = fbb.writeString(object.videoLocation);
          final thumbnailLocationOffset = object.thumbnailLocation == null
              ? null
              : fbb.writeString(object.thumbnailLocation!);
          final titleOffset = fbb.writeString(object.title);
          final mimetypeOffset = object.mimetype == null
              ? null
              : fbb.writeString(object.mimetype!);
          final dateOffset =
              object.date == null ? null : fbb.writeString(object.date!);
          fbb.startTable(13);
          fbb.addInt64(0, object.id);
          fbb.addOffset(2, videoLocationOffset);
          fbb.addOffset(3, thumbnailLocationOffset);
          fbb.addOffset(4, titleOffset);
          fbb.addOffset(5, mimetypeOffset);
          fbb.addOffset(6, dateOffset);
          fbb.addInt64(7, object.width);
          fbb.addInt64(8, object.height);
          fbb.addInt64(9, object.orientation);
          fbb.addInt64(10, object.filesize);
          fbb.addFloat64(11, object.duration);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = VideoFile(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              title: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 12, ''),
              videoLocation: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, ''),
              thumbnailLocation: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 10),
              date: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 16),
              duration: const fb.Float64Reader()
                  .vTableGetNullable(buffer, rootOffset, 26),
              filesize: const fb.Int64Reader()
                  .vTableGetNullable(buffer, rootOffset, 24),
              height: const fb.Int64Reader()
                  .vTableGetNullable(buffer, rootOffset, 20),
              mimetype: const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 14),
              orientation: const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 22),
              width: const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 18));

          return object;
        })
  };

  return ModelDefinition(model, bindings);
}

/// [VideoFile] entity fields to define ObjectBox queries.
class VideoFile_ {
  /// see [VideoFile.id]
  static final id = QueryIntegerProperty<VideoFile>(_entities[0].properties[0]);

  /// see [VideoFile.videoLocation]
  static final videoLocation =
      QueryStringProperty<VideoFile>(_entities[0].properties[1]);

  /// see [VideoFile.thumbnailLocation]
  static final thumbnailLocation =
      QueryStringProperty<VideoFile>(_entities[0].properties[2]);

  /// see [VideoFile.title]
  static final title =
      QueryStringProperty<VideoFile>(_entities[0].properties[3]);

  /// see [VideoFile.mimetype]
  static final mimetype =
      QueryStringProperty<VideoFile>(_entities[0].properties[4]);

  /// see [VideoFile.date]
  static final date =
      QueryStringProperty<VideoFile>(_entities[0].properties[5]);

  /// see [VideoFile.width]
  static final width =
      QueryIntegerProperty<VideoFile>(_entities[0].properties[6]);

  /// see [VideoFile.height]
  static final height =
      QueryIntegerProperty<VideoFile>(_entities[0].properties[7]);

  /// see [VideoFile.orientation]
  static final orientation =
      QueryIntegerProperty<VideoFile>(_entities[0].properties[8]);

  /// see [VideoFile.filesize]
  static final filesize =
      QueryIntegerProperty<VideoFile>(_entities[0].properties[9]);

  /// see [VideoFile.duration]
  static final duration =
      QueryDoubleProperty<VideoFile>(_entities[0].properties[10]);
}
